Changes from version 0.2-2 to 0.2-4:
---------------------------------

- Added methods for comparing "Date" objects.

- Added compareEqual() method for logical arrays.

- Made compareIgnoreOrder.default() more robust.
  Should now handle comparing model vector with non-vector comparison.

- Made compareFile() and compareFiles() more robust 
  (by using internal variable names that are less likely to be
   overwritten by the model answer code!)

- Made coerceCoerce.factor() more robust.
  Should now handle comparing model factor with non-atomic comparison.


Changes from version 0.2 to 0.2-2:
---------------------------------

- Improved "equal" comparison for data frames (used to check only
  for comparison with more columns than model;  now also checks for
  comparison with fewer columns than model).

- Fixed bug in commentQuestions() for when a question has
  more than one model name (so has a comment for each name).

- Fixed bug in compareCoerce.data.frame() when comparison is 
  a simple vector *with a names attribute*.  The problem was
  that the names attribute could not be put back after coercing
  the vector to a data frame;  the fix is to rep() the original
  names attribute to the right length for the data frame.  This
  avoids an error message, though it is unlikely to produce
  anything that will successfully compare.

- Fixed bug in compareCoerce.numeric() when comparison is 
  NOT an atomic object (so coercion will fail).  This now 
  checks first whether the comparison is either atomic or
  (special case) a factor.  

  Something similar probably needs
  to be added to compareCoerce methods for "character",
  "logical", and "integer".

- Fixed bug in compareCoerce.default() when comparison cannot
  be made (it was just returning the transform, NOT a complete
  comparison object).  The symptom was an error message like this:
  "Error in comp$result : $ operator is invalid for atomic vectors"


Changes from version 0.1 to 0.2:
-------------------------------

- The 'round' argument to compare() (and compareEqual()
  and compareFile()) may now be a function (of one argument).

- Better defaults are provided so that, if no specific method
  is provided for comparing objects of a certain class, a
  default comparison is performed.  For example, "lm"
  objects are compared as if they are just lists.
